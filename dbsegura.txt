-- Tabla de Usuarios
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario VARCHAR(50) UNIQUE NOT NULL,
    contrasena VARBINARY(255) NOT NULL,
    intentos_fallidos INT DEFAULT 0,
    bloqueado BOOLEAN DEFAULT FALSE
);

-- Tabla de Roles
CREATE TABLE roles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre ENUM('Cliente', 'Vendedor', 'Administrador') NOT NULL UNIQUE
);

-- Tabla de Permisos
CREATE TABLE permisos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) UNIQUE NOT NULL
);

-- Tabla de Relación Roles-Permisos
CREATE TABLE roles_permisos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rol_id INT,
    permiso_id INT,
    FOREIGN KEY (rol_id) REFERENCES roles(id),
    FOREIGN KEY (permiso_id) REFERENCES permisos(id)
);

-- Tabla de Relación Usuarios-Roles
CREATE TABLE usuarios_roles (
    usuario_id INT,
    rol_id INT,
    PRIMARY KEY (usuario_id, rol_id),
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    FOREIGN KEY (rol_id) REFERENCES roles(id)
);

-- Tabla de Métodos de Pago
CREATE TABLE metodos_pago (
    id INT AUTO_INCREMENT PRIMARY KEY,
    metodo VARCHAR(50) UNIQUE NOT NULL
);

-- Tabla de Pedidos
CREATE TABLE pedidos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    estado ENUM('pendiente', 'enviado', 'cancelado') NOT NULL,
    total DECIMAL(10,2) DEFAULT 0,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Tabla de Auditoría de Pedidos
CREATE TABLE auditorias_de_pedidos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    pedido_id INT,
    usuario_id INT,
    cambio VARCHAR(255),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (pedido_id) REFERENCES pedidos(id),
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Tabla de Historial de Acciones
CREATE TABLE history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    descripcion TEXT,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de Logs de Sesiones
CREATE TABLE logs_sesiones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    ip VARCHAR(45),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Índice para búsqueda de usuarios
CREATE INDEX idx_usuario ON usuarios(usuario);

-- Trigger para Auditoría de Cambios en Pedidos
DELIMITER $$
CREATE TRIGGER trg_auditoria_pedidos
AFTER UPDATE ON pedidos
FOR EACH ROW
BEGIN
    IF OLD.estado <> NEW.estado THEN
        INSERT INTO auditorias_de_pedidos (pedido_id, usuario_id, cambio)
        VALUES (NEW.id, NEW.usuario_id, CONCAT('Cambio de estado: ', OLD.estado, ' -> ', NEW.estado));
    END IF;
END $$
DELIMITER ;

-- Procedimiento para Bloquear Usuarios
DELIMITER $$
CREATE PROCEDURE BloquearUsuario(IN p_usuario_id INT)
BEGIN
    UPDATE usuarios SET bloqueado = TRUE WHERE id = p_usuario_id;
END $$
DELIMITER ;

-- Procedimiento para Desbloquear Usuarios
DELIMITER $$
CREATE PROCEDURE DesbloquearUsuario(IN p_usuario_id INT)
BEGIN
    UPDATE usuarios SET bloqueado = FALSE, intentos_fallidos = 0 WHERE id = p_usuario_id;
END $$
DELIMITER ;

-- Trigger para Control de Intentos Fallidos
DELIMITER $$
CREATE TRIGGER trg_intentos_fallidos
BEFORE UPDATE ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.intentos_fallidos >= 4 THEN
        SET NEW.bloqueado = TRUE;
    END IF;
END $$
DELIMITER ;

-- Trigger para Cálculo Automático del Total de un Pedido
DELIMITER $$
CREATE TRIGGER trg_calculo_total_pedido
BEFORE INSERT ON pedidos
FOR EACH ROW
BEGIN
    DECLARE total_pedido DECIMAL(10,2);
    SELECT SUM(precio) INTO total_pedido FROM detalle_pedido WHERE pedido_id = NEW.id;
    SET NEW.total = IFNULL(total_pedido, 0);
END $$
DELIMITER ;

-- Inserción de un usuario con contraseña cifrada
INSERT INTO usuarios (usuario, contrasena) 
VALUES ('admin', SHA2('Admin1234!', 256));

MySQL no tiene una función HASH() incorporada. En su lugar, usamos SHA2() para generar un hash seguro de la contraseña.

SHA2('Admin1234!', 256) genera un hash SHA-256 de la contraseña y la encripta.


-- Tabla auditoria
CREATE TABLE auditoria (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    ip VARCHAR(45),
    accion TEXT,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuario(id)
);



-- vista de auditoria
CREATE VIEW vista_auditoria_resumen AS
SELECT 
    a.id,
    u.nombre AS usuario,
    a.ip,
    a.accion,
    a.fecha
FROM auditoria a
JOIN usuario u ON a.usuario_id = u.id;





-- trigger auditoria_productos
DELIMITER $$

CREATE TRIGGER auditoria_productos
AFTER UPDATE ON productos
FOR EACH ROW
BEGIN
    IF OLD.stock <> NEW.stock THEN
        INSERT INTO auditoria (usuario_id, ip, accion)
        VALUES (
            NULL, -- puedes reemplazar con ID actual si tienes una sesión activa
            '0.0.0.0', -- IP fija o capturada por app
            CONCAT('Cambio de stock en producto ', NEW.nombre, ': ', OLD.stock, ' -> ', NEW.stock)
        );
    END IF;
END $$

DELIMITER ;




-- Agregar dirección_ip
ALTER TABLE ventas
ADD direccion_ip VARCHAR(45);


